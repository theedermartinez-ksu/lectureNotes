HW 3 due tonight - don't add parentheses


p ∨ q ∨ r

vs

p ∨ (q ∨ r)   ??

/////////////

Remember order of operations in natural deduction.

What's wrong here?

1 ( p ∨ q ∨ r ) by Premise,
2 SubProof(
    3 Assume(p v q)
    4 SubProof(
        5 Assume(p)
        ...
        ( r v q v p )
    ),
    20 SubProof(
        21 Assume(q),
        ...
        ( r v q v p )
    ),
    30 ( ( r v q v p ) ) by OrE(3, 40, 20)
),
5 SubProof(
    6 Assume(r)
    ...
    7 ( r v q v p) by ...
),
40 ( r v q v p ) by OrE(1, 2, 5)




1 ( p ^ q ^ r ) by Premise,
2 ( p ^ q )         by AndE1(1)




no new homework this week

Exam 1 is Thursday, September 12

////////////////////////////////

Today:
- Another natural deduction example with OR
- Implies elimination
- Exam 1 review



HW 2 quick discussion:
- check solution for more details on missed problems


p: it is sunny
q: I go hiking

p -> q

"It is sunny, so I go hiking"

should be: "If it is sunny, then I go hiking"

Is this correct?

////////////////////////////////

Proving equivalence.

--> how do we prove two statements are equal in truth tables?






--> how could we prove equivalence with proofs?

first |- second

AND

second |- first

////////////////////////////////

Example: prove one of the distributive laws

p ∨ (q ∧ r)     is equivalent to       (p ∨ q) ∧ (p ∨ r)

Already did on Thursday:

    (p ∨ q) ∧ (p ∨ r) ⊢  p ∨ (q ∧ r)

p |- p v q


What is left?




(finish orDist1.sc)


////////////////////////////////

How could we prove two statements are NOT equivalent?

p → q     vs    q → p

find ONE truth assignment where the two statements
have different outputs

p = F
q = T

first statement would be true, second statement would be false

////////////////////////////////

Implies-elimination, ImplyE

          P, P → Q
ImplyE: -----------
            Q



(This rule is also called "modus ponens")

Example:

//Suppose we know x > 5. What can we conclude?

if (x > 5) {
    y = 17;
}

y = 17

///////////////////////////////

Syntax for using ImplyE:

a ( P       )   by Justification,
b ( P → Q   )   by Justification,
c ( Q       )   by ImplyE(b, a)

__>:

////////////////////////////////////////

Example (imply1.logika):

(p ∧ q) → r,  p → q,  p  ⊢ r



Example (imply2.logika):

p → r,  q → r,  p ∨ q  ⊢ r


////////////////////////////////////////

(This ends the new material for Exam 1)

(We will do Implies-introduction after Exam 1)

////////////////////////////////////////

Exam 1 review.

Covers everything we've done up to this point (including today).

See Canvas announcement for list of topics.




How to prove two propositional logic statements are equivalent?

    Approach 1:
    truth table for both statements
    for every truth assignment, both statements have the same output

    Approach 2:
    statement1 |- statement2

    and also

    statement2 |- statement1

    (do two natural deduction proofs)

How to prove propositional logic statements are NOT equivalent?

    find one truth assignment that has a different output
    for the two statements

    (can't prove NOT equivalent with natural deduction)


What is satisfiability? a statement is satisfiable if I can
    find at least one truth assignment that makes its output
    true

    how prove a statement is satisfiable?
        just one truth assignment


    how prove a statement is not satisfiable?

        need full truth table. Show output is false for
        every single truth assignment.


- Determining whether an argument is valid or invalid
    (what is an argument?)
    given a set of premises, see if a conclusion logically follows

    how prove valid?

        Approach 1:
        combined truth table with all premises/conclusion

        show any time ALL premises are true then the conclusion
            was also true

         Approach 2: prove that sequent
            premises |- conclusion

            with natural deduction

    how prove invalid?
        just need ONE truth assignment where all premises
        are true but conclusion is false


/////////////////////////////////////////

Closed notes/computers.


All problems will be "open-ended" - similar in content/format
to HW problems.


Some problems will ask for a proof or explanation --
    read carefully!

////////////////////////////////////////

See previous exam.