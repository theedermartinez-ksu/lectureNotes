Homework 2 due tonight

--> not getting Logika feedback on truth tables?

--> reminder: how to type different operators


Homework 3 will be posted after class

////////////////////////////

Homework 1: common mistakes

    - You'll stop eating at Chipotle if they raise their prices.

    - Chipotle doesn't raise their prices

    (what is being promised?)



y = 0;
if (a > 10 && a < 20) {
    x = 20;
}
else {
    if (a > 10) {
        y = 17;
    }
}

Just after the code fragment finishes, suppose we know that
y is 17 but that x is NOT 20.

What can we conclude about a? Explain.

--> what if we removed the "y=0"?


///////////////////////////

Today:
- Order of operations: implies
- Review: proving statements are not equivalent; satisfiability
- Prove arguments with truth tables
- Counterexamples to arguments

///////////////////////////

Implies operator in Logika truth tables.

--> operator precedence is incorrect

--> Homework problems will use parentheses to force correct order

--> see example

p ^ q -> r   vs   (p ^ q) -> r

//////////////////////////

Satisfiability.

Definition: a statement is satisfiable if there is at least
one truth assignment that makes the statement true


- what kind of statement is satisfiable? what kind is not?




Example: (p → ¬q) → r

Is it satisfiable? How could we show it?





Is (p V q) ^ ¬p ^ ¬q satisfiable?    How could we show it?


/////////////////////////////////

Proving an argument.

*Premises* - pieces of information we are given (assume true)

*Conclusion* - something we are trying to show logically follows
    from our premises.


--> What do we want to show?

///

Proofs with truth tables.

Suppose we know:

    - I am in the CS department or I am in the ECE department
    - I am not in the ECE department.
    - I can log in to the CS lab computers if
        I am in the CS department.

I want to prove:

    - I can log in to the CS lab computers
        and I am in the CS department.

--> How would we translate to propositional logic?



Translations:


--> How might we prove this with truth tables?


--> what idea do we want to demonstrate?

////////////////////////////

Format for a truth table proof:

             (mark * for each premise/conclusion)
--------------------------------------------------------------
variables # (premise1, premise2, ..., premiseN) |- conclusion
---------------------------------------------------------------
... fill in like a truth table for each premise and conclusion
---------------------------------------------------------------

Valid [T assigns where all premises T - conc should also be T]



////////////////////////////

Example: truthTableProof1.logika

/////////////////////////////

Another example (truthTableProof2.logika)

Premises:
    p → ¬q
    p → q
    p ∨ q

We wish to prove:

    q





/////////////////////////////

Showing arguments are invalid.

An argument is invalid if there is at least one truth assignment
    where all the premises are true but the conclusion is false.

Example:

Premises:

    If it is sunny, then I wear sunscreen.

    I wear sunscreen.


Proposed conclusion:

    It is sunny.


1) Translate to propositional logic





2) How can we show it is invalid?






////////////////////////////

Showing arguments are invalid in Logika

(invalidProof.logika)



////////////////////////////

Downside of proofs with truth tables?









////////////////////////////

New idea: demonstrate conclusion follows from premises using
*natural deduction*

--> use a minimal set of deduction rules

--> for each logical operator
    - *introduction* rule:
        lets us introduce a claim with that operator

    - *elimination* rule:
        lets us extract pieces from a claim with that operator

--> apply these rules to create new claims that logically follow



/////////////////////////////////

Want to prove a *sequent* of the form:

    premises ⊢ conclusion

where *premises* is a comma-separated list.





Same idea as truth tables.
 --> want to prove that anytime the premises are all true,
    then the conclusion is also true.


--> but we will show the conclusion logically follows using
a series of natural deduction rules instead of truth tables.


////////////////////////////

AND rules idea.

1) What if we wanted to INTRODUCE an AND operator, like:
      P ∧ Q


   --> in what situations do you think we could do that?





2) What if we already had an AND statement like  P ∧ Q.

    --> what new claims would make sense using that statement?




    --> what happened to the AND operator in both cases?



//////////////////////////

AND rule summaries.


AND introduction:

         P   Q
AndI : ---------
         P ∧ Q



--> How could we demonstrate this rule in a truth table?




///

AND elimination:

          P ∧ Q               P ∧ Q
AndE1 : ---------   AndE2 : ---------
          P                  Q



--> How could we demonstrate these rules in a truth table?



//////////////////////////////////

What if we knew:

    a ∨ ¬b

and also:

    c → d

What could we claim with AndI?





//////////////////////////////////

Natural deduction proof syntax.

(premises) ⊢ (conclusion)
Proof(
    1 (  claim          ) by Justification,
    2 (  claim          ) by Justification,
    ...
    10 (  conclusion    ) by Justification
)




claim: a propositional logic statement
justificaton: the rule justifying the corresponding claim
    (with line numbers to reference previous claims)



/////////////////////////////////

Justifications so far:

    Premise

    AndI(lhsNum, rhsNum)

    AndE1(andNum)

    AndE2(andNum)


--> what do these look like in programming?

--> what do you think they're actually doing?



////////////////////////////////

Example:

Given premises:  a ∧ b, c
Use natural deduction to prove: b ∧ c

(and1.sc)

/////////////////////////////////

Prove the following sequent (and2.sc)

p, q, r ⊢ r ∧ (q ∧ p)



////////////////////////////////

Prove the following sequent (and3.sc)

p ∧ q ∧ r ⊢ q


////////////////////////////////

Next time:

- OR rules in natural deduction
- Using natural deduction to prove two statements are equivalent
- Equivalent if-statements
- If time, implies rules in natural deduction
