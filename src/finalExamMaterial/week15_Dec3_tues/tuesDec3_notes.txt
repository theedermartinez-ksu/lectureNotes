HW 11 due today

Final exam is Monday, December 9 2:00-3:50 pm

See announcement for repo of practice problems

We'll review on Thursday

////////////////////////////////////

Problem 3 on HW 11: reverse a sequence

loops while i < seq.size/2
    swaps elements at i, seq.size-i-1


What does it mean to be reversed?

the element at position i equals the original element
    at position seq.size-i-1


After i iterations of the loop:
    what has changed?
        elements up to i have been swapped


    what is the same? the middle
        from position i up to seq.size-i

///////////////////////////////////

Problem 4 on HW 11 (sorted): it's OK to add a precondition

    feel free to require that the sequence be a certain size

///////////////////////////////////

Problem 6 on HW 11: Fan specification

Fan speeds: 0-5
Fan can be on (speeds 1-5) or off (speed 0)
Fan can optionally rotate (but ONLY at speeds 3-5)

Think of it as having two controls:
    1) speed knob (becomes on when 1-5, off when 0)
        --> can only change one speed level at a time

    2) rotation lever

--> since rotation is a DIFFERENT control, changing
    speed can't change rotation


Initially:
    fan off
    speed 0
    rotate off

Global invariants:
    curSpeed >= 0,
    curSpeed <= 5,
    fanOn == true -> curSpeed > 0,
    fanOn == false -> curSpeed == 0,
    rotateOn == true -> curSpeed >= 3


Functions:
    setSpeed(speed: Z)
    turnOn()
    makeRotate()
    stopRotate()



    Fan on, speed 3, rotate on. Can we call setSpeed(2)?
        NO - we wouldn't be going fast enough to rotate.

    Fan off, speed 0, rotate off. Can we call setSpeed(1)?
        YES - and the fan would end up being on

    Fan on, speed 2, rotate off. Can we call setSpeed(0)?
        NO - can't skip speeds

    Fan on, speed 3, rotate on. Can we call setSpeed(4)?
        YES

    Fan on, speed 3, rotate on. Can we call makeRotate()?
        NO - the fan is already rotating

    Fan on, speed 5, rotate off. Can we call setSpeed(5)?
        NO - we have to change the speed

    Fan on, speed 5, rotate off. Can we call setSpeed(6)?
        NO - 6 is too high

    Fan on, speed 1, rotate off. Can we call setSpeed(0)?
        YES - and the fan is marked as off

setSpeed(speed: Z) preconditions?
    speed must be between 0 and 5
    speed can't be the current speed
    speed must be exactly one away from current speed
    speed must be 3 or higher if rotate is currently on



///////////////////////////

Today:
- program specification in practice
- specifying Java programs with JML
- termination
- Halting problem


///////////////////////////

Binary search bug.


    int mid = (low+high)/2;


--> what's the problem? how to fix?

    int mid = low + (high-low)/2;


--> how long was it there? original C++ (in 80s)
    in Java until 2006



///////////////////

Timsort bug (Java's Collections sort / Arrays.sort / Python's sort)
    - developed in 2002
    - breaks array into series of runs that are separately sorted
        and merged


--> bug discovered when researchers tried to use formal verification
    to prove correctness in 2015...and were unsuccessful

--> would crash in certain cases when the run lengths became smaller
    than expected


http://envisage-project.eu/proving-android-java-and-python-sorting-algorithm-is-broken-and-how-to-fix-it/



///////////////////////////

Java Modeling Language (JML)

    --> There are tools (OpenJML and KeY) that can do
        formal verification of Java programs

    - can verify correctness if you provide JML specifications for:
        - function contracts
        - for loops:
            - loop invariants
            - termination measure

    https://www.openjml.org/tutorial/
    https://www.key-project.org/applications/program-verification/

    --> They are sometimes used to verify Java library functions


///////////////////////////////

JML specification syntax.

See jmlSyntax.txt for a primer


////////////////////////////////


Complete formal verification is not practical in many cases

Halfway option

- Write a formal specification (avoids ambiguity) that
    *could* be used with a verification tool
- Enforce preconditions
- Check postconditions


/////////////////////////////////

Whose job is it to check preconditions?

    --> ...can we enforce in practice?


    --> What to do if preconditions not met? Should we return a dummy
        value?




How to check postconditions?




--> why might this would be preferable to only using test cases?



/////////////////////////////

IntelliJML - does some JML syntax checking

https://gitlab.utwente.nl/fmt/intellijml/-/releases

Download the IntelliJ-1.1.8.jar file

In IntelliJ, File->Settings->Plugins, click the gear, select
    "Load Plugin from Disk", find the jar file



////////////////////////////////////

JMLExample.java


- add function contract checks to each method



///////////////////////////////////////

Review: global invariants.

If a class has global invariants
- those invariants should hold when an object is created

- it is an unlisted precondition of each method that the global
    invariants hold

- it is an unlisted postcondition of each method that the global
    invariants STILL hold




in a class with global invariants, write a globalsAssert method
    - where should we call it?



///////////////////////////////////////

See Account example (similar to what we did with Logika)

//////////////////////////////////////

Best practices outside class

- write global invariants
    - considerations for method parameters?

    - considerations for method code?



- write preconditions and postconditions for all methods
    - throw exceptions if your preconditions aren't met



Next level:
- add asserts that global invariants still true at method end

- add asserts for postconditions


--> be careful with documentation


//////////////////////////////////////

Content of CIS 575.


To prove correctness of a function:

   - function contract (preconditions and postconditions)
   - loop invariant for any loops
        - describe progress loop has made so far
        - bound the loop counter
        - describe measure of work (for termination)


The process of proving correctness of a non-Logika algorithm
or function is EXACTLY the same approach we used in Logika.


--> What approach is that?



/////////////////////////////////////

Termination - whether a program will finish on all inputs


Partial Correctness:
    if the precondition is satisfied
    we guarantee the postcondition if the program terminates


Total Correctness:
    if the precondition is satisfied
    we guarantee the postcondition AND termination


We need to show termination to achieve total correctness


////////////////////////////////////////

Termination with a loop.
    - create measure of how much work is left
        (i.e., how many iterations are left)

    - show that the measure DECREASES with each iteration
    - show that if there is no more work to do, then the loop
        has finished

    - see example



Termination with recursion.
    - can use induction



Collatz function.



////////////////////////////////////////

Decidability - whether a problem can be decided one way or another

Halting problem - given a computer program and a set of inputs
    can you write another program to determine if the original
    program will halt for the inputs?


Suppose, for the sake of contradiction, that I CAN write
a program that can determine if another program terminates.

Assume we have this function:

    def Halt(Function, Input):
        if (Function(Input) halts): return true
        else return false

We write:

    def DoOpposite(Function):
        if (Halt(Function, Function)) loop forever
        else exit

Consider DoOpposite(DoOpposite).

Case 1: DoOpposite(DoOpposite) loops forever. Then
    Halt(DoOpposite, DoOpposite) must have returned true. Thus
    DoOpposite(DoOpposite) halts.

Case 2: DoOpposite(DoOpposite) exits (halts). Then
    Halt(DoOpposite, DoOpposite) must have returned false. Then
    DoOpposite(DoOpposite) didn't halt.

Both cases end in a contradiction. Thus we cannot write a Halt function.

//////////////////////////////////

Next time:
- review for final