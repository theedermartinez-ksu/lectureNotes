In the program below, complete the function contract in the castVotes function so the
program (including the asserts at the bottom) would be verified in Logika's auto mode.



var total: Z = 0
var cand1: Z = 0
var cand2: Z = 0

//global invariants
@spec def inv = Invariant(
    total == cand1 + cand2,
    cand1 >= 0,
    cand2 >= 0
)

def castVotes(candNum: Z, numVotes: Z) : Unit = {
    Contract(
        //COMPLETE THE FUNCTION CONTRACT
        Requires(
            candNum == 1 V candNum == 2,
            numVotes >= 0
        ),
        Modifies(cand1, cand2, total),
        Ensures(
            total == In(total) + numVotes,
            candNum == 1 -> cand1 == In(cand1) + numVotes,
            candNum == 2 -> cand2 == In(cand2) + numVotes
        )
    )

    if (candNum == 1) {
        cand1 = cand1 + numVotes
    }

    if (candNum == 2) {
        cand2 = cand2 + numVotes
    }

    total = total + numVotes
}

//////// Test code ///////////
assert(total == 0 & cand1 == 0 & cand2 == 0)

castVotes(1, 3)

assert(total == 3 & cand1 == 3 & cand2 == 0)

castVotes(2, 2)
assert(total == 5 & cand1 == 3 & cand2 == 2)

castVotes(1, 1)
assert(total == 6 & cand1 == 4 & cand2 == 2)