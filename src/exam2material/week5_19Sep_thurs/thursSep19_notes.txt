HW 4 due Tues Sep 24

--> remember to manually run Logika check
--> consider getting new version of Sireum IVE

/////////////////

Today:
- continue negation rules

/////////////////

Reminder: NegE and NegI.


        P    ¬P
NegE: ----------
          F



        SubProof(
            Assume( P ),
          ... F
        )
NegI: ------------------
              ¬P



//////////////////////////

Review: finish not2.sc, not3.sc

//////////////////////////

Bottom-elimination:

               F
BottomE:  ----------
               Q


//how does this make logical sense?

(think about what we are proving with an argument --
    IF all the premises are true,
    THEN we promise the conclusion is true)




Proof by contradiction (reductio ad absurdum):

        SubProof(
            Assume(¬P),
            ...
            F
        )
PbC:  -------------------
          P


--> Difference between NegI and PbC?

///////////////////////////////////

First examples.

( p, ¬p ) ⊢ ( q )
Proof(
    1 ( p )     by Premise,
    2 ( ¬p )    by Premise,
    3 ( F )     by NegE(1, 2),
    4 ( q )     by BottomE(3)
)


p: I go for a walk
q: I get coffee

Premises:
p ∨ q: I go for a walk or I get coffee
¬p: I don't go for a walk

Conclusion:
q: I get coffee


( p ∨ q, ¬p ) ⊢ ( q )
Proof(
    1 ( p ∨ q )     by Premise,
    2 ( ¬p )        by Premise,

    //try OrE

    3 SubProof(
        4 Assume(p),
        5 (F) by NegE(4, 2),
        6 (q) by BottomE(5)
        //goal: q
    ),
    7 SubProof(
        8 Assume(q)

        //goal: q
    ),
    9 (q) by OrE(1, 3, 7)

    //goal: q
)



( ¬¬p ) ⊢ ( p )
Proof(
    1 ( ¬¬p )   by Premise,

    2 SubProof(
        3 Assume (¬p),
        4 (F) by NegE(3, 1)
        //goal: F
    ),
    5 (p) by PbC(2)

    //want p, try PbC
)




///////////////////////////////////

In separate files:


( ¬q → ¬p ) ⊢ ( p → q )         //not4.sc




( ¬(¬p ∨ ¬q) ) ⊢ ( p ∧ q )     //not5.sc




//////////////////

A THEOREM in propositional logic is something that is
always true with no need for premises. For example:


Law of the excluded middle. (LEM)

p ∨ ¬p



What would a theorem be in a truth table?



Prove LEM:

⊢ p ∨ ¬p                //lem.sc



⊢ (theorem that you are trying to prove)

//////////////////////////////////

<-- stopped here, will continue on Tuesday

/////////////////////////////////

How do we approach proofs?

1. Write out all the premises
2. Extract all information from premises (∧e, →e)
3. Look at what you are trying to prove (find top level operator)

    ∧ -

    ∨ -

    → -

    ¬(something) -

    just a propositional atom?
        look for where that atom IS in your premises




After each claim - see what we can extract that is new.


Inside a subproof - think about top-level op for your goal
    in that subproof



Doesn't fit a pattern or doesn't work out from above:
- Negation involved?


- As a last resort, copy/paste LEM proof to have
    (something) ∨ ¬(something).
    Use OrE on it.



--> when do we open a subproof?





--> can we assume anything? yes....but, needs to fit
    pattern of one of the 4 to finish the subproof.



/////////////////////////////////

Next time:
- putting everything together
- soundness and completeness
- proving equivalence (more)
- begin sets