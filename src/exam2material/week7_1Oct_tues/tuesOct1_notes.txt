HW 5 due today
    - double-check link: 5 pt deduction for incorrect format

HW 6 will be posted after class

Exam 2 will be next Thursday, October 10


//////////////////////

Note: PbC rule



//////////////////////

Today:
- Evaluating predicate logic statements
- Predicate logic translations with sets of numbers
- DeMorgan's laws for quantifiers
- Introduction to rules for quantifiers in natural deduction

//////////////////////

Evaluating predicate logic statements

1) ∀ x P(x)
    translation: all x's are p ish (are true of whatever p is)
    true when: Px is true for every single element
    false when: find one counter example

2) ∃ x P(x)
    translation: there exists an x thta is P-ish
    true when:  find one example where px is true
    false when: show that px is false for every element

3) ¬(∀ x P(x)) // think about the inside then throw the not
    translation: not all x's are p ish
    true when: can find ONE example that is NOT p-ish
    false when: all xs are p ish

4) ¬(∃ x P(x))
    translation: there does not exits an x that is p-ish
    true when: show that all x's are not p-ish
    false when: find one that x is p-ish

5) ∀ x ¬P(x)
    translation: all x are not p ish
    true when: all elements have to not be P-ish
    false when: find one counterexample where x is p ish

6) ∃ x ¬P(x)
    translation: every x is not p ish
    true when: find one element where x is not p ish
    false when: all element are  p ish

//////////////////////

Domain: steak, ice cream, pineapple, cheese, (vegan) crackers
Predicates: IsSweet(x), IsPlant(x), IsVegan(x), IsMeat(x)


Translate/evaluate:
    ∀ x ¬IsSweet(x)
        All foods are not sweet
        False: Ice cream is sweet

    ¬(∀ x (IsVegan(x) → IsPlant(x)))
        //when we have a negated quatifier, evaluate the inside first
        // all vegan foods are plants -> not all vegan food are plants

        True: crackers are vegan but are not plants

    ¬(∃ x (IsSweet(x) ⋀ IsMeat(x)))
        //think about inside
        // There is a meat that is sweet -> there is not a meet that is sweet
        true - there is no food thatis both meat and also sweet (the only meet is steak and it is not sweet)

    ∃ x ¬(IsSweet(x) ⋀ IsMeat(x))\
        there exits a meat that is not both sweet and meat || there
        True - Crackers


//////////////////////

Domain: ℤ (the integers)


What do these mean in English? Are they true?


∀ n ∃ m (n^2 < m)
∀ n - outer look/ pick a number
∃ m - inner loop/ every integer
for all integer, the square of all integers is less than some other other integer
true: pick one more bigger




∀ x ∃ y (x == y^2)

    all integers are perfect squares

¬(∀ n ∃ m (n^2 < m))



¬(∀ x ∃ y (x == y^2))



/////////////////////////

∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

/////////////////////////


Write the following in predicate logic:
----------------------------------------

The sum of two negative integers is negative

Domain: ℤ

∀ x ∀ y (x<0 ^ x<0  →  x+y <0)
all integers x, all integers y
if you pick me two numbers that are negative then it will be less than 0

The difference of two positive integers is
not necessarily positive

    x - y

    True: 5-6

∃ x ∃ y(x > 0 ^ y>0 ^ (x-y) <=0)

∀ x ∀ y(x > 0 ^ y>0 →


/////////////////////////

Equivalence: DeMorgan's law (part 1).

¬(∃ x P(x))         ∀ x (¬P(x))


suppose our domain is k1 through kn


¬(∃ x P(x)) is  equivalent to... !(p(ki)) V !p(k2) ...    = !(p(ki) ^ !(p(k2)...
we replace the there exits with or
∀ x ¬P(x)



∀ x (¬P(x)) is equivalent to...






///////////////////////////////////////

Equivalence: DeMorgan's law (part 2).

¬(∀ x P(x))       ∃ x (¬P(x))


suppose our domain is k1 through kn
    !(p(ki) ^ p(pk2)

    !p(k1) V !p(k2)

    E x !p(x)


¬(∀ x P(x)) is equivalent to...?



∃ x (¬P(x)) is equivalent to...?


//////////////////////////////////////

Apply DeMorgan's laws: example

Domain: students
Predicates:
    in5th(x): student x is in 5th grade
    wonPrize(x): student x won a prize
    friendsWith(x, y): student x is friends with student y


1) Express the statement in predicate logic

2) Negate the statement so no negation is outside a quantifier
or outside a statement with logical connectives

    Reminder:
        p → q is equivalent to: ¬p ⋁ q
        ¬(p ⋀ q) is equivalent to: ¬p ⋁ ¬q
        ¬(p ⋁ q) is equivalent to: ¬p ⋀ ¬q
        ¬(p → q) is equivalent to: ???

///
Domain: students
    in5th(x): student x is in 5th grade
    wonPrize(x): student x won a prize
    friendsWith(x, y): student x is friends with student y



A 5th grader won a prize
    //there exists a 5th grader


Translation:
    E x (5th grader ^ wonPrice(x))

Negation:

     !(E x (5th grader ^ wonPrice(x))

     //we have to turn this into simplest form where negation is not on parenthesis

     (∀ x !(5th grader ^ wonPrice(x)) -> (∀ x (!5th grader || !wonPrice(x))

     all students are arent in 5th grade or did not win a price
     (for a forall we use implies)
     p -> q == !p or Q

     all 5th graders did not win a price
///

All prize-winners were 5th graders
//promise all price winners are 5th fraders
Translation:
    ∀ x (wonPrice (x) -> in5th(x)
Negation:
    !(∀ x (wonPrice (x) -> in5th(x))
     E x !(wonPrice (x) -> in5th(x) )
     memorize this ->  p -> q == !p or Q
     E x !(!wonPrice(p) ^ Q)


///

A 5th grader is friends with all prize winners

Translation:
    two quantifiers
    there excists  and all
    ∃ x ∀ y (in 5th(x) ^ wonPrice(y) ^ friends(x,y))



Negation:

    !(∃ x ∀ y (in 5th(x) ^ wonPrice(y) ^ friends(x,y))
    ∀ x ∃ y !(in 5th(x) ^ wonPrice(y) ^ friends(x,y))
    //WE KNOW TOP LEVEL OPERATOR IS SECOND AND SO WE GET
    ∀ x ∃ y (!(in 5th(x) ^ wonPrice(y)) ^ !friends(x,y)) //TURN INTO IMPLIES SPREAD NEGATIVE
    ∀ x ∃ y ((in 5th(x) ^ wonPrice(y)) -> friends(x,y))
    //FOR ALL WE TURN INTO IMPLIES

////////////////////////////////////

Arguments in predicate logic

Set of premises
Conclusion

Argument is VALID: regardless of domain,
    whenever all the premises are true,
    then the conclusion is also true

Argument is INVALID: we can find a domain where
    all the premises are true but the conclusion is false



Examples -- are the following arguments valid?

///

Premises: ∀ x (P(x) → Q(x)), ∃ x P(x)
Conclusion: ∃ x Q(x)

Valid or not? YES - WHICHEVER INDIVUDAL P WAS TRUE FOR, q WILL ALSO BE TRUE FOR THAT INDIVIDUAL


///

Premises: ∀ x P(x) : everyone in my domain is P-ish
Conclusion: ∃ x P(x): there is someone in domain who is P-ish

Valid or not? what if my domain is emptry
p held for all elements since it was empty



/////////////////////////////////

Proofs in predicate logic.

- want to formalize the kind of reasoning from above

- want valid inference rules that do NOT depend on the domain
    (there is no way to do the equivalent of a
    "truth table proof" in predicate logic...
        there are infinitely many domains!)

- add inference rules on quantifiers to our deduction rules


////////////////////////////////

Writing predicate logic statements in Logika

In Logika, ∀ x P(x) is written as:

    ∀ ((x: T) => P(x))



In Logika, ∃ x P(x) is written as:

    ∃ ((x: T) => P(x))



--> what is "T"?


Slang->Insert Template->Forall. This will insert the statement:

∀((ID: TYPE) => CLAIM)



(similarly, insert a there exists statement)

////////////////////////////////

When you have homework or we do examples, the proof files
will look like this:

// #Sireum #Logika
//@Logika: --manual --background disabled

import org.sireum._
import org.sireum.justification._
import org.sireum.justification.natded.prop._
import org.sireum.justification.natded.pred._

@pure def ProofName[T](pred1: T => B @pure, pred2: T => B @pure,
                ..., indiv1: T, indiv2: T, ...): Unit = {
    Deduce(
        //@formatter:off
        (comma-separated list of premises)
            ⊢
        (conclusion)

        Proof(
            //the actual proof steps go here
        )
        //@formatter:on
    )
}


///////////////////////////////

For-all elimination (∀e):

           ∀ ((x: T) => P(x))
AllE[T]:  ---------------------
                   P(v)

//where v is a particular individual in the domain
//(i.e, v has type T)


Idea:

- if we know that a statement is true for ALL individuals in
our domain


...then what would we know about a specific individual
in that domain?

///////////////////////////////

Syntax:

(
    ∀ ((x: T) => Human(x))
)
⊢
( Human(Socrates) )

Proof(
    1 ( ∀ ((x: T) => Human(x)) )    by Premise,
    2 Human(Socrates)               by ???
)

Note: This assumes "Socrates" and "Human" were both parameters
to our proof function:


@pure def Example[T](Human: T => B @pure, Socrates: T)



///////////////////////////////

Example (all1.sc)


∀ x (inCIS301(x) → takenCIS200(x)), inCIS301(bob) ⊢ takenCIS200(bob)


//////////////////////////////

Next rule will be for all introduction.

First: consider these two statements:


∀ x (P(x) ⋀ Q(x))           (∀ x P(x)) ⋀ (∀ x Q(x))


are they equivalent?

how would we defend our position?


//////////////////////////////////


For-all introduction (∀i):

            Let (   (a: T) => SubProof(
                ...
                P(a)
            )),
AllI[T] : -------------------------------
                 ∀ ((x: T) => P(x))


//"a" is an unused, "fresh" individual

Idea:

- We know a statement holds for some arbitrary individual
- That individual could have been anything!

...what can we say about that statement for all individuals?




Syntax:

4 Let ( (a: T) => SubProof(
    ...
    P(a)
)),
10 ( ∀ ((x: T) => P(x)) ) by AllI[T](4)


//a could be any (fresh) individual name


///////////////////////////////////

Example:

Prove these statements are equivalent:

∀ x (P(x) ⋀ Q(x))           (∀ x P(x)) ⋀ (∀ x Q(x))


all2.sc

///////////////////////////////////

Are these statements equivalent?

∀ x (P(x) ⋁ Q(x))           (∀ x P(x)) ⋁ (∀ x Q(x))



///////////////////////////////////

Next time:
- continue with for all quantifier example
- proofs and equivalences with the existential quantifier





