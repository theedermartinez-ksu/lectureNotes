HW 9 due Tues Nov 5

////////////////////

Today:
- more programming logic
- processing assignment statements with mutation
- handling division and modulo
- processing conditional statements

/////////////////////

Assignment with mutation


var x: Z = 2

Deduce(
    //what could go here?
)

x = x + 2       //what do we know about x?

Deduce(
    //what could go here?
)

x = x + 4




//////////////////////////////

If you change the value of variable "name", write that claim
using:

    Old(name)

in the very next proof block. Only ONE "Old" value exists
at a time.


The Old(name) refers to value of the variable just before
the latest update.

Goal: state that variable's current value WITHOUT using Old
by the end of next proof block


y = y + 4

Deduce(
    ???
)

x = x + 3

Deduce(
    ???
    //what "Old" values are available?
)

//////////////////////

Example (add3.sc):

- get an input number
- save out an "orig" value that is equal to the input

add 1 to the input number
add 2 to the input number

assert that the result is 3 more than the orig value



--> what if we added an assume that the input number
    was positive?

--> could we add to our assert that the resulting number
    is positive?

//////////////////////

Programs with division.


Only numerical type in our programs?

We will only look at z type

--> what does that mean about division?

7/4 = 1 no remainder integer division



--> what do we need to demonstrate before using division?

Deduce(
    1 (b!=0) //what should go here?

)

x = a / b

Deduce(
    1 (2 != 0) by Algebra*()  //what should go here?
)

y = a / 2 bruh



--> consider this snippet:


val a: Z = num / 3
val b: Z = num*3

suppose num is 16, then a would be ? 5

b would be? 48

Deduce(
    1 ( a == num/3 ) by Premise,

    //is this true?
    2 ( a*3 == num ) by Algebra*(1) //it is not equal since we lost the remainder!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    3 ( b == num*3 ) by Premise,

    //is this true?
    4 ( b/3 == num ) by Algebra*(3) // we didnt lose the remainder!!!
)

/////////////////////////////

Programs with modulo.

7 % 4 = 3

numerator % denominator


modulo is only defined for:
    - nonzero "denominators"
    //we must show that the denominator is not 0


--> we will only consider programs with positive denominators



--> demonstrate ONE OF THESE before using modulo:

denominator > 0     //we'll use this one
denominator != 0


//what should go here?

Deduce(
2!= 0
)

x = a % 2





--> consider this snippet:

val test: Z = num/3

//maybe num is 16
//test = ??

Deduce(
    1 ( test == num/3 ) by Premise,

    //is this OK?
    2 ( num == 3*test + num%3 ) by Algebra*(1)// 16 = 3*5 + num
    //we can always express division like this. number of total times plus the remainder.
)


////////////////////////////

Example (mod.sc):

- get positive, even input number

- add 1 to the number
    (assert that it is now odd)

- multiply the number by 2
    (assert that the number is now even)




/////////////////////////////

When working with multiplication and division...

Try to avoid using division in logic blocks if you can
help it. Try to express things with multiplication instead.

//////////////////////////////////

Verifying conditional statements.

For now, we'll just look at if/else statements:


if (condition) {

} else {
    //can put another if/else in here
}


/////////////////////////////////

(maxOfTwo.sc)

Example: max of two numbers


...we still need to prove our assert


/////////////////////////////////

How to validate programs with conditionals.

if (C) {

} else {

}

assert(something)

/////////////////////////////////

Deduce(
    1 ( P )
)

if (C) {
    Deduce(
        1 ( P ) by Premise, //why? nothing has changed since we did not change anything
        2 ( C ) by Premise  //why? because we are in the if branch
    )

    claims

    Deduce(
        1 ( Q ) by Justification,
        2 ( A ) by Justification
    )

} else {
    Deduce(
        1 ( P ) by Premise,     //why? anything we had estblishd before the if else
        2 ( !(C) ) by Premise   //why? only way we are here is !c
    )

    claims

    Deduce(
        1 ( Q ) by Justification,
        2 ( B ) by Justification
    )
}

Deduce(
    1 ( Q ) by Premise,     //why? in BOTH of the if and else we get Q
    2 ( A V B ) by Premise  //why? or elimination, we knew one or the other was true, the conclusion must hold.
)

/////////////////////////////

Revisit the max example (maxOfTwo.sc)

- what claims can we make in BOTH branches?
- what claim will be different in the two branches?
- finish the validation

////////////////////////////////

(abs.sc)

Example: absolute value

////////////////////////////////

Next week:
- Verifying programs with nested conditionals
    (your last HW 9 problem is like this)
- Verifying functions


SUBSTITUTION


find >_  and replace with other side (where the equality, eq to replace)
find <_  and replace with other side (where the equality, eq to replace)

when doing by premise, keep track if your x chnges and you have a vairable
that is x at the beggining, we can use it instead of x